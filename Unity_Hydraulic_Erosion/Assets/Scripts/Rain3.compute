#pragma kernel Rain
#pragma kernel CalculateFlux
#pragma kernel Flow
#pragma kernel d1_d
#pragma kernel Erode

#pragma kernel Deposit

#define gs 32

RWStructuredBuffer<float> b;
RWStructuredBuffer<float> b1;
RWStructuredBuffer<float> d,d1;
RWStructuredBuffer<float> s,s1;
RWStructuredBuffer<float4> f,e;//rltb
int w = 256, h = 256;
float KRain = 1, KCapacity = 1, A = 1, Kdmax = 1, KS = 1, KD = 1, RMin = 0.5, KH = 1, KEvaporation = 0.1, KMove = 10, drag = 0.1, maxV = 0.01, deltaT = 0.02;
[numthreads(gs, gs, 1)]
void Rain (uint3 id : SV_DispatchThreadID)
{
    d[id.x + id.y * w] *= (1.0 - KEvaporation);
    d[id.x+id.y*w] += KRain * deltaT;
}
[numthreads(gs, gs, 1)]
void CalculateFlux(uint3 id : SV_DispatchThreadID)
{
    int i = id.x + id.y * w;

    f[i][2] *= (1 - drag);
    f[i][3] *= (1 - drag);
    f[i][0] *= (1 - drag);
    f[i][1] *= (1 - drag);

    
    float grad = b[i] + d[i] - b[i + 1] - d[i + 1];
    f[i][0] = max(0, f[i][0] + deltaT * A * grad / (grad*grad+1));
    grad = b[i] + d[i] - b[i - 1] - d[i - 1];
    f[i][1] = max(0, f[i][1] + deltaT * A * grad / (grad * grad + 1));
    grad = b[i] + d[i] - b[i +w] - d[i +w];
    f[i][2] = max(0, f[i][2] + deltaT * A * grad / (grad * grad + 1));
    grad = b[i] + d[i] - b[i -w] - d[i -w];
    f[i][3]= max(0, f[i][3] + deltaT * A * grad / (grad * grad + 1));
    
    float k=1; 
    if ((f[i][0] + f[i][1] + f[i][2] + f[i][3]) > 0.0001) k= min(1, d[i] / (f[i][0] + f[i][1] + f[i][2] + f[i][3]) / deltaT);
    f[i][0] *= k;
    f[i][1] *= k;
    f[i][2] *= k;
    f[i][3] *= k;
    s1[i] = s[i];
    d1[i] = d[i];
}


[numthreads(gs, gs, 1)]
void Flow(uint3 id : SV_DispatchThreadID)
{
    int i = id.x + id.y * w;
    float a = s1[i] / (d1[i]+0.000001), f_; //a:含沙量
    f_ = (f[i][0] + f[i][1] + f[i][2] + f[i][3]) * deltaT;
    d[i] -= f_;
    s[i] -= f_ * a;
    
    if (id.x > 0)
    {
        f_=f[i - 1][0] * deltaT;
        a = s1[i - 1] / (d1[i - 1] + 0.000001);
        d[i] += f_ ;
        s[i] += f_ * a;
    }
    
    if (id.x <w-1)
    {
        f_ = f[i +1][1] * deltaT;
        a = s1[i + 1] / (d1[i + 1] + 0.000001);
        d[i] += f_ ;
        s[i] += f_ * a;
    }
    if (id.y > 0)
    {
        f_ = f[i -w][2] * deltaT;
        a = s1[i - w] / (d1[i - w] + 0.000001);
        d[i] += f_ ;
        s[i] += f_ * a;
    }
    if (id.y<h-1)
    {
        f_ = f[i + w][3] * deltaT;
        a = s1[i + w] / (d1[i + w] + 0.000001);
        d[i] += f_  ;
        s[i] += f_ * a;
    }
    b1[i] = b[i];
}

[numthreads(gs, gs, 1)]
void d1_d(uint3 id : SV_DispatchThreadID)
{
    int i = id.x + id.y * w;
    d1[i] = d[i];
    e[i][0] = 0;
    e[i][1] = 0;
    e[i][2] = 0;
    e[i][3] = 0;
}

[numthreads(gs, gs, 1)]
void Erode(uint3 id : SV_DispatchThreadID )
{ 
    int i = id.x + id.y * w;
    float db;
    float dd;
    float n;
    
    if ((id.x != ( w - 1))  && (id.x != 0))
    {
        db = b1[i + 1] - b1[i];
        dd = d1[i + 1] - d1[i];
        n = max(0, (f[i][0] - f[i + 1][1]) * (f[i][0] - f[i + 1][1]) * max(0, 1.0 - (d1[i] + d1[i + 1 ])*KH) * deltaT * KS);
        if (b[i]>b[i+1])
            e[i][0] = n;
        else
            e[i+1][1] = n;
    }
     
    db = b1[i + w] - b1[i];
    dd = d1[i + w] - d1[i];
    n = max(0, (f[i][2] - f[i + w][3]) * (f[i][2] - f[i + w][3])  * max(0, 1 - (d1[i] + d1[i + w]) * KH)*deltaT * KS);
    if (b[i] > b[i + w])
        e[i][2] = n;
    else
        e[i + w][3] = n;
    
}


[numthreads(gs, gs, 1)] 
void Deposit(uint3 id : SV_DispatchThreadID)
{
    
    int i = id.x + id.y * w;
    float n = e[i][0] + e[i][1] + e[i][2] + e[i][3];
    b[i] -= n;
    d[i] += n;
    s[i] += n;

    float dis;
    
    if (s[i] > d[i])
    {
        dis = s[i] - d[i];
        s[i] -= dis;
        b[i] += dis;
    }
    dis = min(KD * s[i], s[i]);
    s[i] -= dis;
    d[i] -= dis;
    b[i] += dis;
}
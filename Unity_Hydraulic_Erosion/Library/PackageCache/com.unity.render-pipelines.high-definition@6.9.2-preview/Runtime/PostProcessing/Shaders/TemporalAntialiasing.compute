#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/TemporalAntialiasing.hlsl"

#pragma kernel KTAA_Persp     MAIN=KTAA_Persp
#pragma kernel KTAA_Ortho     MAIN=KTAA_Ortho       ORTHOGRAPHIC
#pragma kernel KCopyHistory


TEXTURE2D_X(_InputTexture);
TEXTURE2D_X(_InputHistoryTexture);

RW_TEXTURE2D_X(float4, _OutputHistoryTexture);
RW_TEXTURE2D_X(float4, _OutputTexture);

#define GROUP_SIZE 8

#ifdef SHADER_API_XBOXONE
#define GROUP_SIZE 16
#endif

[numthreads(GROUP_SIZE, GROUP_SIZE,1)]
void MAIN(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_STEREO_ASSIGN_COMPUTE_EYE_INDEX(dispatchThreadId.z);
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _ScreenSize.zw, uint2(GROUP_SIZE, GROUP_SIZE));
    
    float2 jitter = _TaaJitterStrength.zw;

    #if defined(ORTHOGRAPHIC)
    // Don't dilate in ortho
    float2 closest = posInputs.positionSS;
    #else
    float2 closest = GetClosestFragment(posInputs);
    #endif

    float2 motionVector;
    DecodeMotionVector(LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, closest), motionVector);
    float motionVecLength = length(motionVector);

    float2 uv = posInputs.positionNDC - jitter;

    float3 color = Fetch(_InputTexture, uv, 0.0, _RTHandleScale.xy);
    float3 history = Fetch(_InputHistoryTexture, posInputs.positionNDC - motionVector, 0.0, _RTHandleScaleHistory.xy);

    float3 topLeft = Fetch(_InputTexture, uv, -RADIUS, _RTHandleScale.xy);
    float3 bottomRight = Fetch(_InputTexture, uv, RADIUS, _RTHandleScale.xy);

    float3 corners = 4.0 * (topLeft + bottomRight) - 2.0 * color;

    // Sharpen output
    #if SHARPEN
    float3 topRight = Fetch(_InputTexture, uv, float2(RADIUS, -RADIUS), _RTHandleScale.xy);
    float3 bottomLeft = Fetch(_InputTexture, uv, float2(-RADIUS, RADIUS), _RTHandleScale.xy);
    float3 blur = (topLeft + topRight + bottomLeft + bottomRight) * 0.25;
    color += (color - blur) * SHARPEN_STRENGTH;
    #endif
    
    color = clamp(color, 0.0, CLAMP_MAX);

    float3 average = Map((corners + color) / 7.0);

    topLeft = Map(topLeft);
    bottomRight = Map(bottomRight);
    color = Map(color);

    float colorLuma = Luminance(color);
    float averageLuma = Luminance(average);
    float nudge = lerp(4.0, 0.25, saturate(motionVecLength * 100.0)) * abs(averageLuma - colorLuma);

    float3 minimum = min(bottomRight, topLeft) - nudge;
    float3 maximum = max(topLeft, bottomRight) + nudge;

    history = Map(history);

    // Clip history samples
    #if CLIP_AABB
    history = ClipToAABB(history, minimum, maximum);
    #else
    history = clamp(history, minimum, maximum);
    #endif

    // Blend color & history
    // Feedback weight from unbiased luminance diff (Timothy Lottes)
    float historyLuma = Luminance(history);
    float diff = abs(colorLuma - historyLuma) / Max3(colorLuma, historyLuma, 0.2);
    float weight = 1.0 - diff;
    float feedback = lerp(FEEDBACK_MIN, FEEDBACK_MAX, weight * weight);

    color = Unmap(lerp(color, history, feedback));
    color = clamp(color, 0.0, CLAMP_MAX);
    
    _OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = float4(color.xyz, 1.0);
    _OutputHistoryTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = float4(color.xyz, 1.0);
}

[numthreads(8,8,1)]
void KCopyHistory(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_STEREO_ASSIGN_COMPUTE_EYE_INDEX(dispatchThreadId.z);

    if (any(dispatchThreadId.xy > uint2(_ScreenSize.xy)))
        return;  // Out of bounds, discard

    _OutputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = _InputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)];
}

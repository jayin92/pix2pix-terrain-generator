#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/GTAOCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"

#pragma kernel GTAODenoise_Spatial SPATIAL
#pragma kernel GTAODenoise_Temporal                     TEMPORAL_DENOISE_KERNEL_NAME=GTAODenoise_Temporal         TEMPORAL  HALF_RES
#pragma kernel GTAODenoise_Temporal_FullRes             TEMPORAL_DENOISE_KERNEL_NAME=GTAODenoise_Temporal_FullRes TEMPORAL  FULL_RES

#pragma kernel GTAODenoise_CopyHistory HISTORY_COPY



RW_TEXTURE2D_X(float3, _BentNormalsTexture);

TEXTURE2D_X_UINT(_AOPackedData);

#ifdef SPATIAL

#define DEBUG_VISUALIZE_BILATERAL_WEIGHTS 0

#define DEPTH_SCALE 1
#define BILATERAL_EPSILON 0.01

// TODO: This pass really could really use some quality improvement. 

RW_TEXTURE2D_X(uint, _AOPackedBlurred);

float BilateralWeight(float sampleDepth, float linearCentralDepth)
{
    float linearSample = LinearEyeDepth(sampleDepth, _ZBufferParams);
    float delta = abs(linearSample - linearCentralDepth);
    float w = saturate(1.0f - (DEPTH_SCALE * delta + BILATERAL_EPSILON));

    return w;
}

float Blur(float2 centralPos, out float centralDepth)
{
    float2 temporalOffset = 0;

    uint4 data_12_15 = GATHER_TEXTURE2D_X(_AOPackedData, s_linear_clamp_sampler, ClampAndScaleUVForBilinear((centralPos + float2(0.0, 0.0) + temporalOffset)  * _AOBufferSize.zw, _AOBufferSize.zw));

    float4 UnpackedAOs, UnpackedDepths;
    UnpackGatheredData(data_12_15, UnpackedAOs, UnpackedDepths);
    centralDepth = UnpackedDepths.y;
    float linearCentralDepth = LinearEyeDepth(centralDepth, _ZBufferParams);

    float total = UnpackedAOs.y;
    float totalWeight = 1;

    // This manual unrolling is horrible looking, but I found it hard to please the PS4 compiler otherwise. TODO: Make this nicer. 

    // First set of gathered data.
    float weight = BilateralWeight(UnpackedDepths.x, linearCentralDepth);
    total += weight * UnpackedAOs.x;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.z, linearCentralDepth);
    total += weight * UnpackedAOs.z;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.w, linearCentralDepth);
    total += weight * UnpackedAOs.w;
    totalWeight += weight;

    // Second set of gathered data.
    uint4 data_8_11 = GATHER_TEXTURE2D_X(_AOPackedData, s_linear_clamp_sampler, ClampAndScaleUVForBilinear((centralPos + float2(-2.0, 0.0) + temporalOffset)  * _AOBufferSize.zw, _AOBufferSize.zw));
    UnpackGatheredData(data_8_11, UnpackedAOs, UnpackedDepths);

    weight = BilateralWeight(UnpackedDepths.x, linearCentralDepth);
    total += weight * UnpackedAOs.x;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.y, linearCentralDepth);
    total += weight * UnpackedAOs.z;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.z, linearCentralDepth);
    total += weight * UnpackedAOs.z;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.w, linearCentralDepth);
    total += weight * UnpackedAOs.w;
    totalWeight += weight;


    // Third set of gathered data.
    uint4 data_4_7 = GATHER_TEXTURE2D_X(_AOPackedData, s_linear_clamp_sampler, ClampAndScaleUVForBilinear((centralPos + float2(0.0f, 2.0) + temporalOffset)  * _AOBufferSize.zw, _AOBufferSize.zw));
    UnpackGatheredData(data_4_7, UnpackedAOs, UnpackedDepths);

    weight = BilateralWeight(UnpackedDepths.x, linearCentralDepth);
    total += weight * UnpackedAOs.x;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.y, linearCentralDepth);
    total += weight * UnpackedAOs.z;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.z, linearCentralDepth);
    total += weight * UnpackedAOs.z;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.w, linearCentralDepth);
    total += weight * UnpackedAOs.w;
    totalWeight += weight;

    // Fourth set of gathered data.
    uint4 data_0_3 = GATHER_TEXTURE2D_X(_AOPackedData, s_linear_clamp_sampler, ClampAndScaleUVForBilinear((centralPos + float2(-2.0, 2.0) + temporalOffset)  * _AOBufferSize.zw, _AOBufferSize.zw));
    UnpackGatheredData(data_0_3, UnpackedAOs, UnpackedDepths);

    weight = BilateralWeight(UnpackedDepths.x, linearCentralDepth);
    total += weight * UnpackedAOs.x;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.y, linearCentralDepth);
    total += weight * UnpackedAOs.z;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.z, linearCentralDepth);
    total += weight * UnpackedAOs.z;
    totalWeight += weight;

    weight = BilateralWeight(UnpackedDepths.w, linearCentralDepth);
    total += weight * UnpackedAOs.w;
    totalWeight += weight;


    total /= totalWeight;

#if DEBUG_VISUALIZE_BILATERAL_WEIGHTS
    return totalWeight / 16.0f;
#endif
    return total;
}

[numthreads(8, 8, 1)]
void GTAODenoise_Spatial(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_STEREO_ASSIGN_COMPUTE_EYE_INDEX(dispatchThreadId.z);

    uint currData = _AOPackedData[COORD_TEXTURE2D_X(dispatchThreadId.xy)];

    float centralDepth;
    float final = Blur(dispatchThreadId.xy, centralDepth);

    _AOPackedBlurred[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = PackAOOutput(final, centralDepth);
}
#endif


#ifdef TEMPORAL


uint PackHistoryData(float AO, float depth, float mvLen)
{
    uint packedVal = 0;
    packedVal = BitFieldInsert(0x000000ff, UnpackInt(AO, 8), packedVal);
    packedVal = BitFieldInsert(0x0000ff00, UnpackInt(mvLen, 8) << 8, packedVal);
    packedVal = BitFieldInsert(0xffff0000, UnpackInt(depth, 16) << 16, packedVal);
    return packedVal;
}

void UnpackHistoryData(uint historyData, out float AO, out float depth, out float mvLen)
{
    AO = UnpackUIntToFloat(historyData, 0, 8);
    mvLen = UnpackUIntToFloat(historyData, 8, 8);
    depth = UnpackUIntToFloat(historyData, 16, 16);
}

RW_TEXTURE2D_X(uint, _AOOutputHistory);

TEXTURE2D_X_UINT(_AOPackedBlurred);
TEXTURE2D_X_UINT(_AOPackedHistory);

float3 FetchAO(float2 coords, float2 offset, float2 scale)
{
    float2 uv = (coords + offset * _AOBufferSize.zw) * scale;
    uint data = LOAD_TEXTURE2D_X(_AOPackedBlurred, uv * _AOBufferSize.xy).x;
    float AO, depth;
    UnpackData(data, AO, depth);
    return AO;
}

RW_TEXTURE2D_X(float4, _AODebug);
TEXTURE2D_X(_AODebug2);



#if HALF_RES
RW_TEXTURE2D_X(uint, _OcclusionTexture);
#else
RW_TEXTURE2D_X(float, _OcclusionTexture);
#endif

[numthreads(8, 8, 1)]
void TEMPORAL_DENOISE_KERNEL_NAME(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_STEREO_ASSIGN_COMPUTE_EYE_INDEX(dispatchThreadId.z);

    float2 uv = (dispatchThreadId.xy + 0.5) * _AOBufferSize.zw;

    uint currFrameData = _AOPackedBlurred[COORD_TEXTURE2D_X((uv)* _AOBufferSize.xy)];
    float currDepth, currAO;
    UnpackData(currFrameData, currAO, currDepth);

    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _ScreenSize.zw, uint2(8, 8));

#if HALF_RES
    float2 closest = posInputs.positionSS * 2;
#else
    float2 closest = posInputs.positionSS;
#endif
    float2 motionVector;
    DecodeMotionVector(LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, closest), motionVector);
    float motionVecLength = length(motionVector);

    float2 prevFrameNDC = uv - motionVector;

    uint prevData = _AOPackedHistory[COORD_TEXTURE2D_X((prevFrameNDC) * _AOBufferSize.xy)];
    float prevMotionVecLen, prevAO, prevDepth;
    UnpackHistoryData(prevData, prevAO, prevDepth, prevMotionVecLen);

    uint4 currDatas = GATHER_TEXTURE2D_X(_AOPackedBlurred, s_linear_clamp_sampler, ClampAndScaleUVForBilinear(uv, _AOBufferSize.zw));
    float4 currAOs, currDepths;
    UnpackGatheredData(currDatas, currAOs, currDepths);

    float motionVecWeighting = saturate(motionVecLength * 100.0);
    float velWeight = 1.0f - abs(prevMotionVecLen - motionVecWeighting);

    float minAO = min(Min3(currAOs.x, currAOs.y, currAOs.z), currAOs.w);
    float maxAO = max(Max3(currAOs.x, currAOs.y, currAOs.z), currAOs.w);

    // TODO: This require a better investigation. Values in this are pretty much set without too much thought. 
    float nudge = lerp(10, 2, motionVecWeighting) * abs(dot(currAOs, 0.25) - currAO);
    nudge *= velWeight;
    minAO -= nudge;
    maxAO += nudge;

    float diff = abs(currAOs.y - prevAO) / Max3(prevAO, currAO, 0.2);
    float weight = 1.0 - diff;
    float feedback = lerp(0.85, 0.95, weight * weight);

    prevAO = clamp(prevAO, minAO, maxAO);

    float depth_similarity = saturate(pow(prevDepth / currDepths.y, 1) + 0.01);

    float newAO = (lerp(currAO, prevAO, feedback * depth_similarity * velWeight));

    _AOOutputHistory[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = PackHistoryData(newAO, currDepths.y, motionVecWeighting);

#ifdef HALF_RES
    // The conversion and the pow happens in upsample phase.
    _OcclusionTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = PackAOOutput(newAO, currDepths.y);
#else
    _OcclusionTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = 1.0 - PositivePow(newAO, _AOIntensity);
#endif
}
#endif


#ifdef HISTORY_COPY
RW_TEXTURE2D_X(uint, _OutputTexture);
TEXTURE2D_X_UINT(_InputTexture);

[numthreads(8, 8, 1)]
void GTAODenoise_CopyHistory(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    _OutputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = _InputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)];
}
#endif

// We need only need 1 bounce for AO
#pragma max_recursion_depth 1

// HDRP include
#define SHADER_TARGET 50
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Macros.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariablesFunctions.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"

// The target acceleration structure that we will evaluate the reflexion in
Texture2D<float>			          	_StencilTexture;
TEXTURE2D_X(_DepthTexture);

// Output structure of the reflection raytrace shader
float                                   _RaytracingAOIntensity;
RWTexture2D<float4> 					_AmbientOcclusionTextureRW;
RWTexture2D<float4> 					_RaytracingVSNormalTexture;

[shader("miss")]
void MissShaderAmbientOcclusion(inout RayIntersection rayIntersection : SV_RayPayload)
{
	rayIntersection.color += float3(1.0f, 1.0f, 1.0f);
}

[shader("raygeneration")]
void RayGenAmbientOcclusion()
{
	uint2 LaunchIndex = DispatchRaysIndex().xy;
    uint2 LaunchDim = DispatchRaysDimensions().xy;

	// Pixel coordinate of the current pixel
    uint2 currentPixelCoord = uint2(LaunchIndex.x, LaunchIndex.y);

    // Get the scramblingValue of this pixel
    uint2 scramblingValue = ScramblingValue(currentPixelCoord.x, currentPixelCoord.y);

    // Reset the value of this pixel
    _AmbientOcclusionTextureRW[currentPixelCoord] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	// Read the depth value
	float depthValue  = LOAD_TEXTURE2D_X(_DepthTexture, currentPixelCoord).r;
	if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
		return;

	// Convert this to a world space position
	PositionInputs posInput = GetPositionInput(currentPixelCoord, 1.0/LaunchDim.xy, depthValue, _InvViewProjMatrix, _ViewMatrix, 0);
	posInput.positionWS = GetAbsolutePositionWS(posInput.positionWS);

	// Decode the world space normal
    NormalData normalData;	
    DecodeFromNormalBuffer(currentPixelCoord, normalData);
	
	// the number of samples based on the roughness
	int numSamples = _RaytracingNumSamples;

    if (_RayCountEnabled > 0)
    {
        _RayCountTexture[currentPixelCoord].x = _RayCountTexture[currentPixelCoord].x + (uint)numSamples;
    }

	// Variable that accumulate the radiance
	float3 finalColor = float3(0.0, 0.0, 0.0);

	// Minimal distance of the intersection
	float minDistance = _RaytracingRayMaxLength;

	// Let's loop through th e samples
	for (int i = 0; i < numSamples; ++i)
	{
        // Compute the current sample index
        int globalSampleIndex = _RaytracingFrameIndex * _RaytracingNumSamples + i;

    	// Generate the new sample (follwing values of the sequence)
        float2 noiseValue = float2(0.0, 0.0);
        noiseValue.x = GetRaytracingNoiseSample(globalSampleIndex, 0, scramblingValue.x);
        noiseValue.y = GetRaytracingNoiseSample(globalSampleIndex, 1, scramblingValue.y);

    	// Importance sample the direction
	    float3 sampleDir = SampleHemisphereCosine(noiseValue.x, noiseValue.y, normalData.normalWS);
		
		// Create the ray descriptor for this pixel
		RayDesc rayDescriptor;
		rayDescriptor.Origin = posInput.positionWS + normalData.normalWS * _RaytracingRayBias;
		rayDescriptor.Direction = sampleDir;
		rayDescriptor.TMin = 0;
		rayDescriptor.TMax = _RaytracingRayMaxLength;

		// Create and init the RayIntersection structure for this
		RayIntersection rayIntersection;
		rayIntersection.color = float3(0.0, 0.0, 0.0);
		rayIntersection.incidentDirection = rayDescriptor.Direction;
		rayIntersection.origin = rayDescriptor.Origin;
		rayIntersection.t = 0.0f;

		// Evaluate the ray intersection
		TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, RAYTRACING_OPAQUE_FLAG, 0, 1, 0, rayDescriptor, rayIntersection);
		
		// combine
		if (rayIntersection.t > 0.0f)
		{
			minDistance = min(minDistance, rayIntersection.t);
		}

		// Accumulate this value
		finalColor += rayIntersection.color;
	}

	// Normalize the radiance
	finalColor /= (float)numSamples;

	// Apply our intensity modifier
	finalColor = pow(finalColor, _RaytracingAOIntensity);

	// Alright we are done
    _AmbientOcclusionTextureRW[currentPixelCoord] = float4(1.0 - finalColor, 1.0f);
    float3 normalWS = mul(_InvViewMatrix, float4(normalData.normalWS, 0.0f)).xyz;
    _RaytracingVSNormalTexture[currentPixelCoord] = float4(normalWS, 1.0f);
}

// Fallback default any hit shader for this raytrace shader
[shader("anyhit")]
void AnyHitMain(inout RayIntersection rayIntersection : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
{
    rayIntersection.color = float3(0.0, 0.0, 0.0);
    AcceptHitAndEndSearch();
}
